---
  - name: setup epel release
    yum:
      name: epel-release
      update_cache: yes
      state: present

  - name: Clean dnf RHEL8
    become: true
    command: dnf clean all -y
    when: ansible_distribution_major_version == "8"

  # - name: Install oracle-epel-release-el8 package
  #   ansible.builtin.dnf:
  #     name: oracle-epel-release-el8
  #     state: present
  #   when: ansible_facts['distribution'] == "OracleLinux" and ansible_facts['distribution_major_version'] == "8"

  - name: Enable ol8_codeready_builder on oracle linux 8
    become: true
    command: dnf config-manager --set-enabled ol8_codeready_builder
    when: ansible_distribution_major_version == "8"

  - name: Enable ol9_codeready_builder on oracle linux 9
    become: true
    command: dnf config-manager --set-enabled ol9_codeready_builder
    when: ansible_distribution_major_version == "9"    

  - name: Add the user 'postgres'
    ansible.builtin.user:
      name: postgres
      shell: /bin/bash
      uid: 1040
      group: wheel

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql
      state: directory
      owner: postgres
      group: wheel
      mode: 0775

  - name: Creates directory
    ansible.builtin.file:
      path: /opt/pgsql/data
      state: directory
      owner: postgres
      group: wheel
      mode: 0775      

  - name: Install perl-CPAN and perl-App-cpanminus on Red Hat
    become: true
    yum:
      name: "{{ item }}"
      state: present
    loop:
      - perl-CPAN
      - perl-App-cpanminus
      - perl-IPC-Run

  - name: Install perl module Text::Trim
    become: true
    command: cpanm Text::Trim
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  - name: Install Development tools
    become: true
    command: yum -y groupinstall "Development tools"
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  - name: Enable llvm-toolset dnf module for RHEL8
    become: true
    command: dnf module enable llvm-toolset -y
    when: ansible_distribution_major_version == "8"

  - name: Install llvm-toolset
    become: true
    command: yum install -y llvm-toolset clang-devel clang
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version == "8"

  - name: Install clang clang-devel on RHEL 9
    become: true
    command: yum install -y clang-devel clang
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_distribution_major_version == "9"

  - name: LLVM Version
    command: llvm-config --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: CLANG Version
    command: clang --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 1
    command: rpm -qi systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 2
    command: yum -v search systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: install tools
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - clang
      - zlib-devel
      - readline-devel
      - gcc
      - lz4
      - lz4-devel
      - python3
      - krb5-devel
      - openssl-devel
      - pam-devel
      - libxml2-devel
      - libxslt-devel
      - openldap-devel
      - libuuid-devel
      - systemd-devel
      - tcl-devel
      - python3-devel
      - libicu-devel
      - libzstd
      - libzstd-devel
      - llvm
      - llvm-toolset
      - llvm-devel
      - clang-devel
      - vim
      - git
      - perl-ExtUtils*
      - docbook-xsl
      - perl-IPC-Run
      - perl-Test-Simple
      - prename
      - perl-CPAN
      - lcov
      - libcurl-devel
      - perl-App-cpanminus
      - make
      - autoconf
      - json-c-devel

  - name: Install cpanm CGI::Session
    become: true
    command: cpanm CGI::Session

  - name: Install HTTP::Server::Simple::CGI
    become: true
    command: cpanm HTTP::Server::Simple::CGI

  - name: Debug 3
    command: rpm -qi systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 4
    command: yum -v search systemtap-sdt-devel
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Debug 5
    command: yum install -y systemtap-sdt-devel --allowerasing
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: Install perl Text-trim
    command: cpanm Text::Trim
    ignore_errors: true
    register: results

  - name: install perl modules for rhel 9
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - perl-FindBin
      - perl-Opcode
    when: ansible_distribution_major_version == "9"

  - name: LLVM Version
    command: llvm-config --version
    ignore_errors: true
    register: results

  - debug:
      var: results.stdout

  - name: CLANG Version
    command: clang --version
    ignore_errors: true
    register: results

  - name: Clone Postgres/PDP sources with pg_tde
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
      track_submodules: true
    vars:
      repo: "{{ lookup('env', 'PDP_REPO') }}"
      version: "{{ lookup('env', 'PDP_BRANCH') }}"
    become_user: postgres
    when: with_tde_heap

  - name: Checkout user provided pg_tde branch
    command: git checkout {{ branch }}
    args:
      chdir: /tmp/postgres/contrib/pg_tde
    vars:
      branch: "{{ lookup('env', 'tde_branch') }}"
    become_user: postgres
    when: with_tde_heap and change_tde_branch

  - name: Configure pg_tde from sources without pg_tde
    ansible.builtin.command: ./configure
    become_user: postgres
    args:
      chdir: /tmp/postgres/contrib/pg_tde
    when: with_tde_heap

  - name: Clone Postgres/PDP sources
    git:
      repo: "{{ repo }}"
      version: "{{ version }}"
      dest: /tmp/postgres
    vars:
      repo: "{{ lookup('env', 'PDP_REPO') }}"
      version: "{{ lookup('env', 'PDP_BRANCH') }}"
    become_user: postgres
    when: not with_tde_heap

  - name: Remove pg_tde from source tree contrib/pg_tde
    command: rm -fr contrib/pg_tde*
    args:
      chdir: /tmp/postgres
    when: not with_tde_heap

  - name: Configure Postgres/PDP from sources
    command: ./configure '--enable-rpath' '--prefix=/opt/pgsql' '--enable-tap-tests' '--enable-depend' \
     '--includedir=/opt/pgsql/include' '--mandir=/opt/pgsql/share/man' '--datadir=/opt/pgsql/share' \
     '--libdir=/opt/pgsql/lib' '--with-lz4' '--with-extra-version= - Percona Distribution' '--with-zstd' \
     '--with-icu' '--with-llvm' '--with-perl' '--with-python' '--with-tcl' '--with-tclconfig=/usr/lib64' \
     '--with-openssl' '--with-pam' '--with-gssapi' '--with-includes=/usr/include' '--with-libraries=/usr/lib64' \
     '--enable-nls' '--enable-dtrace' '--with-uuid=e2fs' '--with-libxml' '--with-libxslt' '--with-ldap' \
     '--with-selinux' '--with-systemd' '--with-system-tzdata=/usr/share/zoneinfo' '--sysconfdir=/etc/sysconfig/pgsql' \
     'CFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection' \
     'LDFLAGS=-Wl,--as-needed' 'LLVM_CONFIG=/usr/bin/llvm-config' 'CLANG=/usr/bin/clang' \
     'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig' 'PYTHON=/usr/bin/python3'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results
    when: ansible_architecture == 'x86_64'

  - name: Configure Postgres/PDP from sources
    command: ./configure '--enable-rpath' '--prefix=/opt/pgsql' '--enable-tap-tests' '--enable-depend' \
     '--includedir=/opt/pgsql/include' '--mandir=/opt/pgsql/share/man' '--datadir=/opt/pgsql/share' \
     '--libdir=/opt/pgsql/lib' '--with-lz4' '--with-extra-version= - Percona Distribution' '--with-zstd' \
     '--with-icu' '--with-llvm' '--with-perl' '--with-python' '--with-tcl' '--with-tclconfig=/usr/lib64' \
     '--with-openssl' '--with-pam' '--with-gssapi' '--with-includes=/usr/include' '--with-libraries=/usr/lib64' \
     '--enable-nls' '--enable-dtrace' '--with-uuid=e2fs' '--with-libxml' '--with-libxslt' '--with-ldap' \
     '--with-selinux' '--with-systemd' '--with-system-tzdata=/usr/share/zoneinfo' '--sysconfdir=/etc/sysconfig/pgsql' \
     'CFLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection' \
     'LDFLAGS=-Wl,--as-needed' 'LLVM_CONFIG=/usr/bin/llvm-config' 'CLANG=/usr/bin/clang' \
     'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig' 'PYTHON=/usr/bin/python3'
    args:
      chdir: /tmp/postgres
    become_user: postgres
    register: results
    when: ansible_architecture == 'aarch64'

  - debug: var=results.stdout_lines

  - shell: cat /tmp/postgres/config.log
    register: cat

  - debug: var=cat.stdout_lines

  - name: Build Postgres/PDP (world) from sources
    make:
      chdir: "/tmp/postgres"
      jobs: 4 
      target: world
    become_user: postgres 
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - name: Install Postgres/PDP (install-world) from build binaries
    make:
      chdir: "/tmp/postgres"
      target: install-world 
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - name: Build Postgres/PDP from sources
    make:
      chdir: "/tmp/postgres"
      jobs: 4
    become_user: postgres 
    when: testsuite == 'installcheck'
    register: results

  - debug: var=results.stdout_lines

  - name: Install Postgres/PDP (install only) from build binaries
    make:
      chdir: "/tmp/postgres"
      target: install 
    when: testsuite == 'installcheck'
    register: results

  - debug: var=results.stdout_lines

  - name: Build pg_tde from sources
    make:
      chdir: "/tmp/postgres/contrib/pg_tde"
      jobs: 4
    become_user: postgres
    when: with_tde_heap
    register: results

  - debug: var=results.stdout_lines

  - name: Install pg_tde from build binaries
    make:
      chdir: "/tmp/postgres/contrib/pg_tde"
      target: install
    when: with_tde_heap
    register: results

  - debug: var=results.stdout_lines

  - name: Copy pg_config to /usr/bin
    become: true 
    command: sudo cp /opt/pgsql/bin/pg_config /usr/bin

  - name: initdb cluster
    become_user: postgres
    command: ./initdb -D /opt/pgsql/data
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    register: results

  - debug: var=results.stdout_lines

  - name: Add extensions to postgresql.conf for Debian
    lineinfile:
      path: /opt/pgsql/data/postgresql.conf
      line: shared_preload_libraries = 'pg_tde'
    when: with_tde_heap

  # - name: Set default Access Method - heap
  #   lineinfile:
  #     path: /opt/pgsql/data/postgresql.conf
  #     line: default_table_access_method = 'heap'
  #   when: access_method == 'heap'

  - name: Start Server
    become_user: postgres
    command: ./pg_ctl -D /opt/pgsql/data -l /tmp/postgres/logfile start
    args:
      chdir: /opt/pgsql/bin
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    register: results

  - debug: var=results.stdout_lines

  # - name: Set default Access Method - tde_heap
  #   lineinfile:
  #     path: /opt/pgsql/data/postgresql.conf
  #     line: default_table_access_method = 'tde_heap'
  #   when: with_tde_heap and access_method == 'tde_heap'

  # - name: Set default Access Method - tde_heap_basic
  #   lineinfile:
  #     path: /opt/pgsql/data/postgresql.conf
  #     line: default_table_access_method = 'tde_heap_basic'
  #   when: with_tde_heap and access_method == 'tde_heap_basic'

  - name: Run installcheck-world - Server
    become_user: postgres
    make:
      chdir: "/tmp/postgres"
      target: installcheck-world
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - name: Run installcheck - Server
    become_user: postgres
    make:
      chdir: "/tmp/postgres"
      target: installcheck
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
    when: testsuite == 'installcheck'
    register: results

  - debug: var=results.stdout_lines

  - name: Display regression.diffs contents
    command: cat /tmp/postgres/src/test/regress/regression.diffs
    register: command_output
    when: output.stat.exists

  - name: Print to console
    debug:
      msg: "{{command_output.stdout_lines}}"
    when: output.stat.exists

  - name: yum install -y yum-utils
    become: true
    command: yum install -y yum-utils
    when: with_tde_heap

  - name: yum-config-manager hashicorp repo
    become: true
    command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
    when: with_tde_heap

  - name: yum -y install vault
    become: true
    command: yum -y install vault
    when: with_tde_heap

  - name: Remove multiple extensions tap test case from pg_tde
    become_user: postgres
    command: rm -f /tmp/postgres/contrib/pg_tde/t/005_multiple_extensions.pl
    register: results

  - debug: var=results.stdout_lines

  - name: Start pg_tde tests - installcheck
    shell: | 
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && make installcheck
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/contrib/pg_tde"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
    when: with_tde_heap and testsuite == 'installcheck'
    register: results

  - debug: var=results.stdout_lines

  - name: Start pg_tde tests - installcheck-world
    shell: | 
      TV=$(mktemp)
      { exec >$TV; vault server -dev; } &
      sleep 10
      export ROOT_TOKEN=$(cat $TV | grep "Root Token" | cut -d ":" -f 2 | xargs echo -n)
      echo "Root token: $ROOT_TOKEN"
      export ROOT_TOKEN=$ROOT_TOKEN && make installcheck
    become_user: postgres
    args:
      executable: /bin/bash
      chdir: "/tmp/postgres/contrib/pg_tde"
    environment:
      PATH: "/opt/pgsql/bin:/opt/pgsql/lib:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/opt/pgsql/lib"
      LANG: C.UTF-8
      LC_CTYPE: C
      LC_ALL: C
      PG_TEST_PORT_DIR: "/tmp/pg_tde"
    when: with_tde_heap and testsuite == 'installcheck-world'
    register: results

  - debug: var=results.stdout_lines

  - stat:
      path: /tmp/postgres/contrib/pg_tde/regression.diffs
    register: output

  - name: Display regression.diffs contents
    ignore_errors: yes
    command: cat /tmp/postgres/contrib/pg_tde/regression.diffs
    register: command_output
    when: output.stat.exists

  - name: Print to console
    ignore_errors: yes
    debug:
      msg: "{{command_output.stdout_lines}}"
    when: output.stat.exists
